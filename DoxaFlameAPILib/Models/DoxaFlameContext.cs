// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace DoxaFlameAPILib.Models;

public partial class DoxaFlameContext : DbContext
{
    public DoxaFlameContext(DbContextOptions<DoxaFlameContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AdminDashboardSetting> AdminDashboardSettings { get; set; }

    public virtual DbSet<Church> Churches { get; set; }

    public virtual DbSet<CongregationPreference> CongregationPreferences { get; set; }

    public virtual DbSet<FeedbackSupportTicket> FeedbackSupportTickets { get; set; }

    public virtual DbSet<MemoryPassage> MemoryPassages { get; set; }

    public virtual DbSet<Notification> Notifications { get; set; }

    public virtual DbSet<Pastor> Pastors { get; set; }

    public virtual DbSet<Playlist> Playlists { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Sermon> Sermons { get; set; }

    public virtual DbSet<Service> Services { get; set; }

    public virtual DbSet<Song> Songs { get; set; }

    public virtual DbSet<Speaker> Speakers { get; set; }

    public virtual DbSet<User> Users { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AdminDashboardSetting>(entity =>
        {
            entity.HasKey(e => e.SettingsId).HasName("PK__AdminDas__991B19FC62AC230E");

            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.NotificationsEnabled)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.Theme).HasMaxLength(255);

            entity.HasOne(d => d.Church).WithMany(p => p.AdminDashboardSettings)
                .HasForeignKey(d => d.ChurchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__AdminDash__Churc__0F624AF8");
        });

        modelBuilder.Entity<Church>(entity =>
        {
            entity.HasKey(e => e.ChurchId).HasName("PK__Church__598757E47531F6CD");

            entity.ToTable("Church");

            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Location).HasMaxLength(255);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<CongregationPreference>(entity =>
        {
            entity.HasKey(e => e.PreferenceId).HasName("PK__Congrega__E228496FDCD2C0AB");

            entity.ToTable("CongregationPreference");

            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Church).WithMany(p => p.CongregationPreferences)
                .HasForeignKey(d => d.ChurchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Congregat__Churc__0A9D95DB");

            entity.HasOne(d => d.User).WithMany(p => p.CongregationPreferences)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Congregat__UserI__09A971A2");
        });

        modelBuilder.Entity<FeedbackSupportTicket>(entity =>
        {
            entity.HasKey(e => e.TicketId).HasName("PK__Feedback__712CC60734C70F41");

            entity.ToTable("FeedbackSupportTicket");

            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Message).IsRequired();
            entity.Property(e => e.ResolvedDate).HasColumnType("datetime");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.User).WithMany(p => p.FeedbackSupportTickets)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__FeedbackS__UserI__17F790F9");
        });

        modelBuilder.Entity<MemoryPassage>(entity =>
        {
            entity.HasKey(e => e.MemoryPassageId).HasName("PK__MemoryPa__5E0EED3318869A9D");

            entity.ToTable("MemoryPassage");

            entity.Property(e => e.Book)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Passage).IsRequired();
        });

        modelBuilder.Entity<Notification>(entity =>
        {
            entity.HasKey(e => e.NotificationId).HasName("PK__Notifica__20CF2E12BFEE6DC1");

            entity.ToTable("Notification");

            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Message)
                .IsRequired()
                .HasMaxLength(500);

            entity.HasOne(d => d.User).WithMany(p => p.Notifications)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Notificat__UserI__14270015");
        });

        modelBuilder.Entity<Pastor>(entity =>
        {
            entity.HasKey(e => e.PastorId).HasName("PK__Pastor__DE1C1D5CA5040F29");

            entity.ToTable("Pastor");

            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Email).HasMaxLength(255);
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Phone).HasMaxLength(50);

            entity.HasOne(d => d.Church).WithMany(p => p.Pastors)
                .HasForeignKey(d => d.ChurchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Pastor__ChurchId__60A75C0F");
        });

        modelBuilder.Entity<Playlist>(entity =>
        {
            entity.HasKey(e => e.PlaylistId).HasName("PK__Playlist__B30167A0783C811E");

            entity.ToTable("Playlist");

            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Service).WithMany(p => p.Playlists)
                .HasForeignKey(d => d.ServiceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Playlist__Servic__04E4BC85");

            entity.HasOne(d => d.Song).WithMany(p => p.Playlists)
                .HasForeignKey(d => d.SongId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Playlist__SongId__05D8E0BE");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.RoleId).HasName("PK__Role__8AFACE1AA0E3C356");

            entity.ToTable("Role");

            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<Sermon>(entity =>
        {
            entity.HasKey(e => e.SermonId).HasName("PK__Sermon__5B1A221B635AB804");

            entity.ToTable("Sermon");

            entity.Property(e => e.AudioUrl).HasMaxLength(500);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ScriptureReference).HasMaxLength(255);
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.VideoUrl).HasMaxLength(500);

            entity.HasOne(d => d.Speaker).WithMany(p => p.Sermons)
                .HasForeignKey(d => d.SpeakerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Sermon__SpeakerI__787EE5A0");
        });

        modelBuilder.Entity<Service>(entity =>
        {
            entity.HasKey(e => e.ServiceId).HasName("PK__Service__C51BB00A81659F37");

            entity.ToTable("Service");

            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ServiceDate).HasColumnType("date");

            entity.HasOne(d => d.Church).WithMany(p => p.Services)
                .HasForeignKey(d => d.ChurchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Service__ChurchI__7C4F7684");

            entity.HasOne(d => d.MemoryPassage).WithMany(p => p.Services)
                .HasForeignKey(d => d.MemoryPassageId)
                .HasConstraintName("FK__Service__MemoryP__7D439ABD");

            entity.HasOne(d => d.Sermon).WithMany(p => p.Services)
                .HasForeignKey(d => d.SermonId)
                .HasConstraintName("FK__Service__SermonI__7E37BEF6");
        });

        modelBuilder.Entity<Song>(entity =>
        {
            entity.HasKey(e => e.SongId).HasName("PK__Song__12E3D6978F675325");

            entity.ToTable("Song");

            entity.Property(e => e.Artist).HasMaxLength(255);
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Url).HasMaxLength(500);
        });

        modelBuilder.Entity<Speaker>(entity =>
        {
            entity.HasKey(e => e.SpeakerId).HasName("PK__Speaker__79E7575910F00211");

            entity.ToTable("Speaker");

            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Email).HasMaxLength(255);
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Phone).HasMaxLength(50);

            entity.HasOne(d => d.Church).WithMany(p => p.Speakers)
                .HasForeignKey(d => d.ChurchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Speaker__ChurchI__6477ECF3");

            entity.HasOne(d => d.Pastor).WithMany(p => p.Speakers)
                .HasForeignKey(d => d.PastorId)
                .HasConstraintName("FK__Speaker__PastorI__656C112C");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__User__1788CC4CC6EC69BF");

            entity.ToTable("User");

            entity.HasIndex(e => e.Email, "UQ__User__A9D10534028178E5").IsUnique();

            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.LastLoginDate).HasColumnType("datetime");
            entity.Property(e => e.PasswordHash)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(255);

            entity.HasOne(d => d.PreferredCongregation).WithMany(p => p.Users)
                .HasForeignKey(d => d.PreferredCongregationId)
                .HasConstraintName("FK__User__PreferredC__71D1E811");

            entity.HasOne(d => d.Role).WithMany(p => p.Users)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__User__RoleId__70DDC3D8");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}